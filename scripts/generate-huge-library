#!/usr/bin/env python3

import attr
import subprocess
from pathlib import Path
import shutil
import string
import logging

def make_silent_mp3(length, fname):
    subprocess.run([
        "ffmpeg",
        "-f", "lavfi",
        "-i", "anullsrc=r=44100:cl=mono",
        "-t", str(length),
        "-q:a", "9",
        "-acodec", "libmp3lame",
        fname,
    ], check=True)

def tag_mp3(fname, artist, album, title, track, total_tracks):
    # TODO(jkz): Just call into the mutagen libraries directly.
    subprocess.run([
        "mid3v2",
        "--artist=" + artist,
        "--album=" + album,
        "--song=" + title,
        "--track={0}/{1}".format(track, total_tracks),
        fname,
    ], check=True)

@attr.s
class Ratios:
    albums_per_artist = attr.ib(default=3)
    tracks_per_album = attr.ib(default=10)

# Generate names like A, B, ..., AA, AB, etc.
def letter_name(id):
    if id == 0:
        return "A"
    name = ""
    while id > 0:
        name += string.ascii_uppercase[id % len(string.ascii_uppercase)]
        id //= len(string.ascii_uppercase)
    return name

def artist_name(id):
    return letter_name(id)

def album_name(artist, album_id):
    return artist + "-" + letter_name(album_id)

def track_name(album, track_id):
    return album + "-" + letter_name(track_id)

def build_library(dest, total_songs, ratios):
    if dest.exists():
        raise Exception("refusing to write to {0}, already exists".format(dest))
    dest.mkdir()

    gold_path = dest / "gold.mp3"
    # Make the golden MP3 that will be used to build the library
    make_silent_mp3(5, gold_path)

    logging.info("Built gold MP3 at %s", gold_path)

    cur_album = 0
    cur_track = 0
    cur_artist = 0
    for i in range(total_songs):
        if cur_track > ratios.tracks_per_album:
            cur_track = 0
            cur_album += 1
        if cur_album > ratios.albums_per_artist:
            cur_album = 0
            cur_artist += 1
        artist = artist_name(cur_artist)
        album = album_name(artist, cur_album)
        album_path = dest / artist / album
        if not album_path.exists():
            album_path.mkdir(parents = True)
        track = track_name(album, cur_track)
        track_path = album_path / (track + ".mp3")
        assert not track_path.exists(), "trying to create existing track"
        shutil.copyfile(gold_path, track_path)
        tag_mp3(track_path, artist, album, track,
                cur_track, ratios.tracks_per_album)
        cur_track += 1
        if i % 250 == 0:
            logging.info("Wrote %d tracks...", i)
    logging.info("Done, wrote %d total tracks", total_songs)

if __name__ == "__main__":
    import argparse
    logging.basicConfig(level=logging.DEBUG)
    parser = argparse.ArgumentParser()
    parser.add_argument("library_location")
    parser.add_argument("total_tracks", type=int)
    args = parser.parse_args()
    logging.info("Starting the build. Writing to %s", args.library_location)
    build_library(Path(args.library_location), args.total_tracks, Ratios())
